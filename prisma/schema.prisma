// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
}

model ApiKey {
  id         String       @id @default(cuid())
  user_id    String       @db.VarChar(50)
  name       String       @db.VarChar(50)
  slug       String       @unique @db.VarChar(50)
  key        String       @unique @db.Text
  status     ApiKeyStatus @default(ACTIVE)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  user User @relation(fields: [user_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("api_keys")
}

model User {
  id                 String    @id @default(cuid())
  name               String    @db.VarChar(150)
  email              String    @unique @db.VarChar(150)
  password           String    @db.VarChar(150)
  photo_profile_path String?   @db.Text
  photo_profile_url  String?   @db.Text
  is_email_verified  Boolean   @default(false)
  email_verified_at  DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  api_keys           ApiKey[]
  roles              UserRole[]
  tokens             UserToken[]
  meal_reviews       MealReview[]
  drink_reviews      DrinkReview[]
  created_tags       Tag[]         @relation("creator")
  updated_tags       Tag[]         @relation("updater")
  created_categories Category[]    @relation("creator")
  updated_categories Category[]    @relation("updater")
  created_meals      Meal[]        @relation("creator")
  updated_meals      Meal[]        @relation("updater")
  created_drinks     Drink[]       @relation("creator")
  updated_drinks     Drink[]       @relation("updater")

  @@map("users")
}

model Role {
  id         String   @id @default(cuid())
  name       String   @unique @db.VarChar(50)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users UserRole[]

  @@map("roles")
}

model UserRole {
  user_id String @db.VarChar(50)
  role_id String @db.VarChar(50)

  user User @relation(fields: [user_id], references: [id], onUpdate: Restrict, onDelete: Restrict)
  role Role @relation(fields: [role_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@id([user_id, role_id])
  @@map("user_roles")
}

enum UserTokenType {
  ACCESS
  REFRESH
}

model UserToken {
  id         String        @id @default(cuid())
  user_id    String        @db.VarChar(50)
  type       UserTokenType
  token      String        @db.Text
  expired_at DateTime
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  user User @relation(fields: [user_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("user_tokens")
}

model Tag {
  id         String   @id @default(cuid())
  name       String   @unique @db.VarChar(30)
  slug       String   @unique @db.VarChar(30)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String   @db.VarChar(50)
  updated_by String   @db.VarChar(50)

  meals   MealTag[]
  drinks  DrinkTag[]
  creator User       @relation("creator", fields: [created_by], references: [id], onUpdate: Restrict, onDelete: Restrict)
  updater User       @relation("updater", fields: [updated_by], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("tags")
}

model Category {
  id         String   @id @default(cuid())
  name       String   @unique @db.VarChar(100)
  slug       String   @unique @db.VarChar(100)
  photo_path String?  @db.Text
  photo_url  String?  @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String   @db.VarChar(50)
  updated_by String   @db.VarChar(50)

  meals   MealCategory[]
  drinks  DrinkCategory[]
  creator User            @relation("creator", fields: [created_by], references: [id], onUpdate: Restrict, onDelete: Restrict)
  updater User            @relation("updater", fields: [updated_by], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("categories")
}

enum MealDrinkStatus {
  AVAILABLE
  OUT_OF_STOCK
}

model Meal {
  id          String          @id @default(cuid())
  name        String          @db.Text
  slug        String          @unique @db.Text
  description String          @db.Text
  price       Float
  stock       Int             @default(1)
  status      MealDrinkStatus @default(AVAILABLE)
  rating      Float           @default(0)
  photo_path  String?         @db.Text
  photo_url   String?         @db.Text
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  created_by  String          @db.VarChar(50)
  updated_by  String          @db.VarChar(50)

  tags       MealTag[]
  categories MealCategory[]
  reviews    MealReview[]
  creator    User           @relation("creator", fields: [created_by], references: [id], onUpdate: Restrict, onDelete: Restrict)
  updater    User           @relation("updater", fields: [updated_by], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("meals")
}

model Drink {
  id          String          @id @default(cuid())
  name        String          @db.Text
  slug        String          @unique @db.Text
  description String          @db.Text
  price       Float
  stock       Int             @default(1)
  status      MealDrinkStatus @default(AVAILABLE)
  rating      Float           @default(0)
  photo_path  String?         @db.Text
  photo_url   String?         @db.Text
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  created_by  String          @db.VarChar(50)
  updated_by  String          @db.VarChar(50)

  tags       DrinkTag[]
  categories DrinkCategory[]
  reviews    DrinkReview[]
  creator    User            @relation("creator", fields: [created_by], references: [id], onUpdate: Restrict, onDelete: Restrict)
  updater    User            @relation("updater", fields: [updated_by], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("products")
}

model MealTag {
  meal_id String @db.VarChar(50)
  tag_id  String @db.VarChar(50)

  meal Meal @relation(fields: [meal_id], references: [id], onUpdate: Restrict, onDelete: Restrict)
  tag  Tag  @relation(fields: [tag_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@id([meal_id, tag_id])
  @@map("meal_tags")
}

model MealCategory {
  meal_id     String @db.VarChar(50)
  category_id String @db.VarChar(50)

  meal     Meal     @relation(fields: [meal_id], references: [id], onUpdate: Restrict, onDelete: Restrict)
  category Category @relation(fields: [category_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@id([meal_id, category_id])
  @@map("meal_categories")
}

model DrinkTag {
  drink_id String @db.VarChar(50)
  tag_id   String @db.VarChar(50)

  drink Drink @relation(fields: [drink_id], references: [id], onUpdate: Restrict, onDelete: Restrict)
  tag   Tag   @relation(fields: [tag_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@id([drink_id, tag_id])
  @@map("drink_tags")
}

model DrinkCategory {
  drink_id    String @db.VarChar(50)
  category_id String @db.VarChar(50)

  drink    Drink    @relation(fields: [drink_id], references: [id], onUpdate: Restrict, onDelete: Restrict)
  category Category @relation(fields: [category_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@id([drink_id, category_id])
  @@map("drink_categories")
}

model MealReview {
  id         String   @id @default(cuid())
  meal_id    String   @db.VarChar(50)
  user_id    String   @db.VarChar(50)
  rating     Int
  review     String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  meal Meal @relation(fields: [meal_id], references: [id], onUpdate: Restrict, onDelete: Restrict)
  user User @relation(fields: [user_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("meal_reviews")
}

model DrinkReview {
  id         String   @id @default(cuid())
  drink_id   String   @db.VarChar(50)
  user_id    String   @db.VarChar(50)
  rating     Int
  review     String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  drink Drink @relation(fields: [drink_id], references: [id], onUpdate: Restrict, onDelete: Restrict)
  user  User  @relation(fields: [user_id], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("drink_reviews")
}
